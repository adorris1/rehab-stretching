'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _flux = require('flux');

var _events = require('events');

var _Context = require('./Context');

var _Context2 = _interopRequireDefault(_Context);

var App = (function (_EventEmitter) {
  _inherits(App, _EventEmitter);

  function App(context) {
    _classCallCheck(this, App);

    _EventEmitter.call(this);
    this.context = context;
  }

  App.prototype.init = function init(options) {
    options = options || {};

    // If there's no specified dispatcher, then just create our own one.
    this.context.setDispatcher(options.dispatcher || new _flux.Dispatcher());

    // If there are any endpoints specified, then set these.
    if (options.endpoints) {
      this.context.setEndpoints(options.endpoints);
    }

    this.emit('ready', this.context);
  };

  return App;
})(_events.EventEmitter);

exports['default'] = new App(_Context2['default'].getInstance());
module.exports = exports['default'];