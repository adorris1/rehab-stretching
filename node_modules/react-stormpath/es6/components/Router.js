'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _reactRouter = require('react-router');

var _reactRouter2 = _interopRequireDefault(_reactRouter);

var _Context = require('./../Context');

var _Context2 = _interopRequireDefault(_Context);

var _LoginRoute = require('./LoginRoute');

var _LoginRoute2 = _interopRequireDefault(_LoginRoute);

var _LogoutRoute = require('./LogoutRoute');

var _LogoutRoute2 = _interopRequireDefault(_LogoutRoute);

var Router = (function (_ReactRouter) {
  _inherits(Router, _ReactRouter);

  function Router() {
    _classCallCheck(this, Router);

    _ReactRouter.apply(this, arguments);
    this.markedRoutes = {
      login: {
        type: _LoginRoute2['default'],
        props: null
      },
      logout: {
        type: _LogoutRoute2['default'],
        props: null
      }
    };
    this._mapMarkedRoutes();
    _Context2['default'].getInstance().setRouter(this);
  }

  Router.prototype._mapMarkedRoutes = function _mapMarkedRoutes() {
    var markedRoutes = this.markedRoutes;

    function getChildren(node) {
      if (!node.props.children || !node.props.children.props || !node.props.children.props.children) {
        return [];
      }
      return node.props.children.props.children;
    }

    function walk(node) {
      // Try and map the node to a marked route
      for (var routeName in markedRoutes) {
        var route = markedRoutes[routeName];
        if (node.type == route.type) {
          markedRoutes[routeName].props = node.props;
          break;
        }
      }

      // Walk children
      getChildren(node).forEach(walk);
    }

    walk(this);
  };

  Router.prototype.getLoginRoute = function getLoginRoute() {
    return this.markedRoutes.login.props;
  };

  Router.prototype.getLogoutRoute = function getLogoutRoute() {
    return this.markedRoutes.logout.props;
  };

  return Router;
})(_reactRouter2['default']);

exports['default'] = Router;
module.exports = exports['default'];