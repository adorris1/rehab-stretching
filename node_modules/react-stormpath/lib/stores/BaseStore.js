'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events').EventEmitter;

var BaseStore = (function (_EventEmitter) {
  _inherits(BaseStore, _EventEmitter);

  function BaseStore() {
    _classCallCheck(this, BaseStore);

    _EventEmitter.apply(this, arguments);
  }

  BaseStore.prototype.emitChange = function emitChange() {
    this.emit('change');
  };

  BaseStore.prototype.addChangeListener = function addChangeListener(callback) {
    return this.on('change', callback);
  };

  BaseStore.prototype.removeChangeListener = function removeChangeListener(callback) {
    this.removeListener('change', callback);
  };

  return BaseStore;
})(EventEmitter);

exports['default'] = BaseStore;
module.exports = exports['default'];